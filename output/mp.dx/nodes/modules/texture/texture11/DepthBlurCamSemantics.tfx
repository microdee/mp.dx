
#include <packs/mp.fxh/depthreconstruct.fxh>

Texture2D texCOL : PREVIOUS;
Texture2D<float> texMap;
Texture2D<float> texD;


//TextureCube texENVI <string uiname="Cubemap";>;

float2 R:TARGETSIZE;

SamplerState g_samLinear <string uiname="Sampler";>
{
	Filter = MIN_MAG_MIP_LINEAR;
	AddressU = Clamp;
	AddressV = Clamp;
};
SamplerState g_samPoint : IMMUTABLE
{
	Filter = MIN_MAG_MIP_POINT;
	AddressU = Clamp;
	AddressV = Clamp;
};

cbuffer controls:register(b0){
	float4x4 tP : CPROJ;
	float4x4 tPI : CPROJINV;
	float Radius=0.5;
	//float Amount=.5;
	float Limit=2;
};

#define bld(op,c0,c1) float4(lerp((c0*c0.a+c1*c1.a*(1-c0.a))/saturate(c0.a+c1.a*(1-c0.a)),(op),c0.a*c1.a).rgb,saturate(c0.a+c1.a*(1-c0.a)))

float4 pMIPS(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_Target{
	return texCOL.SampleLevel(g_samLinear,x,0);
}
float3 GetViewPos(SamplerState SS, float2 uv)
{
	float d = texD.SampleLevel(SS, uv, 0);
	return UVZtoVIEW(uv, d, tP, tPI);
}
float3 getFaceNormal(SamplerState s0, float3 position , float2 uv)
{	
	// Get the face normal by using position buffer derivatives
	// dFdx/dFdy may also be used
	float2 pixelStep = 1.0 / ( R.x * R.xy );
	
	float3 n1 = cross( ( GetViewPos(s0, uv - pixelStep * float2( 1, 0 ) ) - position ), 
					 ( GetViewPos(s0, uv - pixelStep * float2( 0, 1 ) ) - position ) );
						  
	float3 n2 = cross( ( GetViewPos(s0, uv + pixelStep * float2( 1, 0 ) ) - position ), 
					 ( GetViewPos(s0, uv + pixelStep * float2( 0, 1 ) ) - position ) );
	  
	return normalize( n1 + n2 );
}

float2 uvoff[9] : IMMUTABLE = 
{
	{0,0}, {1,1}, {1,-1}, {-1,-1}, {-1,1},
	{0,1}, {0,-1}, {-1,0}, {1,0}
};
float offmul : IMMUTABLE = 1.86;

float4 pFB_P1(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_TARGET{
	float z = texD.SampleLevel(g_samPoint, x, 0);
	float3 p=UVZtoVIEW(x, z, tP, tPI);
	float3 n=getFaceNormal(g_samPoint,p,x);
	float sum=.2;
	float lod=log2(max(R.x,R.y));
	float map = texMap.SampleLevel(g_samLinear,x,0);
	lod=Radius*log2(max(R.x,R.y)) * map;
	float4 c=0;
	float2 off=.5/R*pow(2,lod)*saturate(lod);
	lod-=2;
	for(int i=0;i<9;i++){
		if(i==4) off *= offmul;
		float3 np=GetViewPos(g_samPoint, x+uvoff[i]*off);
		float3 nn=getFaceNormal(g_samPoint, np, x+uvoff[i]*off);
		float3 V=np.xyz-p.xyz;
		float d=length(V)+distance(n,nn);
		float k=sqrt(smoothstep(Limit,0,d));
		float4 nc=texCOL.SampleLevel(g_samLinear,x+uvoff[i]*off,lod*k);
		c+=nc*k;
		sum+=k;

	}
	c/=sum+.000001;
	
	//c.rgb=normalize(c.rgb);
	return c;
}

float4 pFB_P2(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_TARGET{
	float z = texD.SampleLevel(g_samPoint, x, 0);
	float3 p=UVZtoVIEW(x, z, tP, tPI);
	float3 n=getFaceNormal(g_samPoint,p,x);
	float sum=.2;
	float lod=log2(max(R.x,R.y));
	float map = texMap.SampleLevel(g_samLinear,x,0);
	lod=Radius*log2(max(R.x,R.y)) * map;
	float4 c=0;
	float2 off=.5/R*pow(2,lod)*saturate(lod);
	for(int i=0;i<9;i++){
		if(i==4) off *= offmul;
		float3 np=GetViewPos(g_samPoint, x+uvoff[i]*off);
		float3 nn=getFaceNormal(g_samPoint, np, x+uvoff[i]*off);
		float3 V=np.xyz-p.xyz;
		float d=length(V)+distance(n,nn);
		float k=sqrt(smoothstep(Limit,0,d));
		float4 nc=texCOL.SampleLevel(g_samLinear,x+uvoff[i]*off,lod*(k<1));
		c+=nc*k;
		sum+=k;

	}
	c/=sum+.000001;
	
	//c.rgb=normalize(c.rgb);
	return c;
}

technique10 FastBlur{
	pass P0 <bool mips=true;>{SetPixelShader(CompileShader(ps_4_0,pMIPS()));}
	pass P1 {SetPixelShader(CompileShader(ps_4_0,pFB_P2()));}
}
technique10 FastBlur_2P{
	pass P0 <bool mips=true;>{SetPixelShader(CompileShader(ps_4_0,pMIPS()));}
	pass P1 <bool mips=true;>{SetPixelShader(CompileShader(ps_4_0,pFB_P1()));}
	pass P2 {SetPixelShader(CompileShader(ps_4_0,pFB_P2()));}
}
