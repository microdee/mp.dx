#include <packs/mp.fxh/texture/depthReconstruct.fxh>

Texture2D<float> svpos;
Texture2D<float> Depth;
float2 R:TARGETSIZE;

cbuffer controls:register(b0){
	float4x4 tPI : CPROJINV;
	float4x4 tP : CPROJ;
	float Focus = 0;
	float width;
	float2 AFpoint;
	float MFtoAF;
	float maxdist = 20;
	float refdist = 10;
	float2 ForeBackGroundRat = 1;
	bool foreground = false;
};

float3 GetViewPos(SamplerState SS, float2 uv)
{
	float d = Depth.SampleLevel(SS, uv, 0);
	return UVZtoVIEW(uv, d, tP, tPI);
}

SamplerState s0:IMMUTABLE <string uiname="Sampler";> {Filter=MIN_MAG_MIP_LINEAR;AddressU=CLAMP;AddressV=CLAMP;};
float4 pADD(float4 PosWVP: SV_POSITION,float2 x: TEXCOORD0):SV_Target
{
	float autofocus = svpos.Sample(s0,AFpoint/2+0.5);
	float focus = lerp(Focus,autofocus,MFtoAF);
	float depth = min(GetViewPos(s0,x).z, maxdist);
	float focdistmod = focus/refdist-0.1;
	float bckgmul = lerp(100/focus,1,saturate(focdistmod));
	float frgmul = lerp(1,4,pow(focdistmod,0.5));
	float cwidth = lerp(width*0.01, width, focdistmod);
	float bckg = max(depth-focus-cwidth/2,0)*bckgmul;
	float frg = -min(depth-focus+cwidth*frgmul*0.5,0);
	if(foreground) return float4(pows(frg.xxx * ForeBackGroundRat.x, 1.1),1);
	else return float4(pows(bckg.xxx * ForeBackGroundRat.y, 0.5),1);
}

technique10 Scalar{
	pass P1 <string format="R16_Float";>
	{SetPixelShader(CompileShader(ps_4_0,pADD()));}
}



