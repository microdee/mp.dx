//@author: 
//@help: 
//@tags: filter
//@credits:

Texture2D tex0: PREVIOUS;
Texture2D tex1 <string uiname="Control";>;

float2 R:TARGETSIZE;

cbuffer controls:register(b0){
	float Width <float uimin=0.0;float uimax=1.0;> =0.5;
	float Shape = 1;
	float FallOff = 1;
	float MapAm = 0;
	float MapPow = 2;
};

SamplerState s0 <bool visible=true;string uiname="Sampler";> {Filter=MIN_MAG_MIP_LINEAR;AddressU=CLAMP;AddressV=CLAMP;};

float2 uvoff[9] : IMMUTABLE = 
{
	{0,0}, {1,1}, {1,-1}, {-1,-1}, {-1,1},
	{0,1}, {0,-1}, {-1,0}, {1,0}
};
float offmul : IMMUTABLE = 1.86;

float4 pBLUR(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_Target{
	float lod=log2(max(R.x,R.y));
	float4 map=tex1.SampleLevel(s0,x,0);
	map=max(map.x,max(map.y,map.z))*map.a * MapAm;
	map=pow(map, MapPow);
	lod=(Width)*log2(max(R.x,R.y));
	float4 c=0;
	float2 off=.5/R*pow(2,lod)*saturate(lod);
	float ishape = 1;
	float ifoff = 1;
	for(int i=0;i<9;i++)
	{
		if(i==4) off *= offmul;
		c+=tex0.SampleLevel(s0,(x+uvoff[i]*off-.5) * ishape +.5,lod) * ifoff;
		ishape *= Shape;
		ifoff *= lerp(FallOff,1,map.x);
	}
	c/=9*pow(Width,2);
	c.a = 1;
	return c;
}

float4 pBLUR_P1(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_Target{
	float lod=log2(max(R.x,R.y));
	float4 map=tex1.SampleLevel(s0,x,0);
	map=max(map.x,max(map.y,map.z))*map.a * MapAm;
	map=pow(map, MapPow);
	lod=(Width)*(log2(max(R.x,R.y)));
	
	float4 c=0;
	float2 off=.5/R*pow(2,lod)*saturate(lod);
	lod-=2;
	
	float ishape = 1;
	float ifoff = 1;
	for(int i=0;i<9;i++)
	{
		if(i==4) off *= offmul;
		c+=tex0.SampleLevel(s0,(x+uvoff[i]*off-.5) * ishape +.5,lod) * ifoff;
		ishape *= Shape;
		ifoff *= lerp(FallOff,1,map.x);
	}
	c/=9*pow(Width,2);
	c.a = 1;
	return c;
}
float4 pBLUR_P2(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_Target{
	float lod=log2(max(R.x,R.y));
	float4 map=tex1.SampleLevel(s0,x,0);
	map=max(map.x,max(map.y,map.z))*map.a * MapAm;
	map=pow(map, MapPow);
	lod=(Width)*log2(max(R.x,R.y));
	float4 c=0;
	float2 off=.5/R*pow(2,lod)*saturate(lod);
	
	float ishape = 1;
	float ifoff = 1;
	for(int i=0;i<9;i++)
	{
		if(i==4) off *= offmul;
		c+=tex0.SampleLevel(s0,(x+uvoff[i]*off-.5) * ishape +.5,lod) * ifoff;
		ishape *= Shape;
		ifoff *= lerp(FallOff,1,map.x);
	}
	c/=9*pow(Width,2);
	c.a = 1;
	return c;
}
float4 pBLUR_P3(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_Target{
	float lod=log2(max(R.x,R.y));
	float4 map=tex1.SampleLevel(s0,x,0);
	map=max(map.x,max(map.y,map.z))*map.a * MapAm;
	map=pow(map, MapPow);
	lod=(Width)*log2(max(R.x,R.y));
	lod*=.75;
	float4 c=0;
	float2 off=.5/R*pow(2,lod)*saturate(lod);
	lod-=3;
	float ishape = 1;
	float ifoff = 1;
	for(int i=0;i<9;i++)
	{
		if(i==4) off *= offmul;
		c+=tex0.SampleLevel(s0,(x+uvoff[i]*off-.5) * ishape +.5,lod) * ifoff;
		ishape *= Shape;
		ifoff *= lerp(FallOff,1,map.x);
	}
	c/=9*pow(Width,2);
	c.a = 1;
	return c;
}
float4 pMIPS(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_Target{
	return tex0.SampleLevel(s0,x,0);
}
technique10 FastBlur{
	pass P0 <bool mips=true;>{SetPixelShader(CompileShader(ps_4_0,pMIPS()));}
	pass P1{SetPixelShader(CompileShader(ps_4_0,pBLUR()));}
}
technique10 FastBlur_NoMips{
	pass P1{SetPixelShader(CompileShader(ps_4_0,pBLUR()));}
}
technique10 TwoPass{
	pass P0 <bool mips=true;>{SetPixelShader(CompileShader(ps_4_0,pMIPS()));}
	pass P1 <bool mips=true;>{SetPixelShader(CompileShader(ps_4_0,pBLUR_P1()));}
	pass P2 {SetPixelShader(CompileShader(ps_4_0,pBLUR_P2()));}
}
technique10 TwoPass_NoMips{
	pass P1 <bool mips=true;>{SetPixelShader(CompileShader(ps_4_0,pBLUR_P1()));}
	pass P2 {SetPixelShader(CompileShader(ps_4_0,pBLUR_P2()));}
}
technique10 ThreePass{
	pass P0 <bool mips=true;>{SetPixelShader(CompileShader(ps_4_0,pMIPS()));}
	pass P1 <bool mips=true;>{SetPixelShader(CompileShader(ps_4_0,pBLUR_P1()));}
	pass P2 <bool mips=true;> {SetPixelShader(CompileShader(ps_4_0,pBLUR_P2()));}
	pass P3 {SetPixelShader(CompileShader(ps_4_0,pBLUR_P3()));}
}
technique10 ThreePass_NoMips{
	pass P1 <bool mips=true;>{SetPixelShader(CompileShader(ps_4_0,pBLUR_P1()));}
	pass P2 <bool mips=true;> {SetPixelShader(CompileShader(ps_4_0,pBLUR_P2()));}
	pass P3 {SetPixelShader(CompileShader(ps_4_0,pBLUR_P3()));}
}