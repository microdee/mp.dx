// Textureless classic 3D noise "cnoise",
// with an RSL-style periodic variant "pnoise".
// Author:  Stefan Gustavson (stefan.gustavson@liu.se)
// Version: 2011-10-11
// Copyright (c) 2011 Stefan Gustavson. All rights reserved.
// Distributed under the MIT license. See LICENSE file.
// https://github.com/ashima/webgl-noise

float2 R:TARGETSIZE;
float Saturation <float uimin=0.0; float uimax=1.0;> = 0.3;
float4x4 Transform;
float4x4 ValueTransform;
cbuffer controls:register(b0){
	float frequency1 = 13;
	float frequency2 = 1;
};
float3 lungth(float2 x,float3 c){
       return float3(length(x+c.r),length(x+c.g),length(x+c.b));
}
	
float4 pPlasma(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_Target{
    float4 c=0;
    float4 x2 = mul(float4(x,0,1),Transform);
	x=x2.xy / x2.w;
    x+=sin(x.yx*sqrt(float2(13,9)))/5;
    c.rgb=lungth(sin(x*sqrt(float2(33,43))),float3(5,6,7)*Saturation);
    x+=sin(x.yx*sqrt(float2(73,53)))/5;
    c.rgb=2*lungth(sin(x*sqrt(float2(33,23))),c/9);
    x+=sin(x.yx*sqrt(float2(93,73)))/7;
    c.rgb=lungth(sin(x*sqrt(float2(frequency1,frequency2))),c/2);
    c=.5+.5*sin(c*8);
    c.a=1;
    return mul(c,ValueTransform);
}

technique10 Plasma{
	pass P0 <string format="R16G16B16A16_Float";>
	{SetPixelShader(CompileShader(ps_4_0,pPlasma()));}
}