
StructuredBuffer<float3> Position;
StructuredBuffer<float3> Normals;
StructuredBuffer<float2> UV;
StructuredBuffer<float4> PrevPos;
StructuredBuffer<uint> Indices;

struct GSin
{
	float4 cpoint : SV_Position;
	float3 norm : NORMAL;
	float2 uv : TEXCOORD0;
	float4 ppos : COLOR0;
};
GSin VS(uint vid : SV_VertexID, uint iid : SV_InstanceID)
{
    GSin output = (GSin)0;
    output.cpoint = float4(Position[vid],1);
	output.norm = Normals[vid];
	output.uv = UV[vid];
	output.ppos = PrevPos[vid];
	
    return output;
}
GSin VSi(uint vid : SV_VertexID, uint iid : SV_InstanceID)
{
    GSin output = (GSin)0;
	uint ii = Indices[vid];
    output.cpoint = float4(Position[ii],1);
	//output.norm = Normals[ii];
	output.uv = UV[ii];
	output.ppos = PrevPos[ii];
	
    return output;
}
[maxvertexcount(3)]
void GS(triangle GSin input[3], inout TriangleStream<GSin>GSOut)
{
	GSin v = (GSin)0;

	for(uint i=0;i<3;i++)
	{
		v=input[i];
		GSOut.Append(v);
	}
}

GeometryShader StreamOutGS = ConstructGSWithSO( CompileShader( gs_5_0, GS() ),
	"SV_Position.xyz;"
	"NORMAL.xyz"
	";TEXCOORD0.xy"
	";COLOR0"
);

technique11 Simple
{
	pass P0
	{
		
		SetVertexShader( CompileShader( vs_5_0, VS() ) );
		SetGeometryShader( CompileShader( gs_5_0, GS() ) );
	    SetGeometryShader( StreamOutGS );

	}
}
technique11 Indexed
{
	pass P0
	{
		
		SetVertexShader( CompileShader( vs_5_0, VSi() ) );
		SetGeometryShader( CompileShader( gs_5_0, GS() ) );
	    SetGeometryShader( StreamOutGS );

	}
}