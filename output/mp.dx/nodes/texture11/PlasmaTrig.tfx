//@author: eps
//@credits: https://www.shadertoy.com/view/Mdl3RH
// Created by inigo quilez - iq/2013
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

float4x4 tTex <string uiname="Texture Transform";bool uvspace=true; >;
float4 cAmb <bool color=true; string uiname="Color";> = {1,1,1,1};

uniform float time;
uniform float2 mouse;

float2 iterate( float2 p, float4 t )
{
    return p - 0.05*cos(t.xz + p.x*p.y + cos(t.yw+1.5*3.1415927*p.yx)+p.yx*p.yx );
}

float4 PS(float4 pos:SV_Position, float2 uv:TEXCOORD0) : SV_Target
{
	float2 xy = mul( float4(uv,0,1), tTex).xy;

	float2 p = -1.0 + 2.0*xy;
//    p *= 1.5;

    float4 t = 0.15*time*float4( 1.0, -1.5, 1.2, -1.6 ) + float4(0.0,2.0,3.0,1.0);

    float2 z = p;
	float3 s = 0;
	for( int i=0; i<100; i++ )
	{
		z = iterate( z + mouse * 0.01, t );

		float d = dot( z-p, z-p );
		s.x += 1.0/(0.1+d);
		s.y += sin(atan2( p.x-z.x, p.y-z.y ));
		s.z += exp(-0.2*d );
	}
    s /= 100.0;

	float3 col = 0.5 + 0.5*cos( float3(0.0,0.4,0.8) + 2.5 + s.z*6.2831 );

	col *= 0.5 + 0.5*s.y;
    col *= s.x;
    col *= 0.94+0.06*sin(10.0*length(z));

//	float3 nor = normalize( float3( dFdx(s.x), 0.02, dFdy(s.x) ) );
	float3 nor = normalize( float3( ddx(s.x), 0.02, ddy(s.x) ) );
	float dif = dot( nor, float3(0.7,0.1,0.7) );
	col -= 0.05*dif;

	col *= 0.3 + 0.7*pow( 16.0*xy.x*xy.y*(1.0-xy.x)*(1.0-xy.y), 0.2 );

	return float4( col, 1.0 );
}

technique10 Process
{
	pass P0 <bool mips=true; string format="R16G16B16A16_Float";>
	{ SetPixelShader(CompileShader(ps_4_0,PS())); }
}
