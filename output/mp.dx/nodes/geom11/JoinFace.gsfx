
StructuredBuffer<float3> Position;
StructuredBuffer<float2> UV;
StructuredBuffer<float4> PrevPos;
StructuredBuffer<uint> Indices;
StructuredBuffer<uint> AdjData;
StructuredBuffer<float2> AdjMeta;

struct GSin
{
	float4 cpoint : SV_Position;
	float3 norm : NORMAL;
	float2 uv : TEXCOORD0;
	float4 ppos : COLOR0;
};
GSin VSi(uint vid : SV_VertexID, uint iid : SV_InstanceID)
{
    GSin output = (GSin)1;
	uint ii = Indices[vid];
    output.cpoint = float4(Position[ii],1);
	output.uv = UV[ii];
	output.ppos = PrevPos[ii];

	float3 norm = 0;
	float areasum = 0;
	
    for (int i = 0; i < AdjMeta[ii].y; i++)
    {
    	int ci = AdjData[AdjMeta[ii].x+i] - (AdjData[AdjMeta[ii].x+i] % 3);
        int itrv0 = Indices[ci];
        int itrv1 = Indices[ci+1];
        int itrv2 = Indices[ci+2];
        float3 trv0 = Position[itrv0];
        float3 trv1 = Position[itrv1];
        float3 trv2 = Position[itrv2];
        float3 f1 = trv1 - trv0;
        float3 f2 = trv2 - trv0;
        float3 cnorm = cross(f1,f2);
    	float area = length(cnorm)/2;
    	areasum += area;
    	cnorm = normalize(cnorm);
        norm += cnorm*area;
        //norm += cnorm;
    }
	norm /= areasum;
	output.norm = normalize(norm);
	
    return output;
}
[maxvertexcount(3)]
void GS(triangle GSin input[3], inout TriangleStream<GSin>GSOut)
{
	GSin v = (GSin)0;

	for(uint i=0;i<3;i++)
	{
		v=input[i];
		GSOut.Append(v);
	}
}

GeometryShader StreamOutGS = ConstructGSWithSO( CompileShader( gs_5_0, GS() ),
	"SV_Position.xyz;"
	"NORMAL.xyz"
	";TEXCOORD0.xy"
	";COLOR0"
);

technique11 Indexed
{
	pass P0
	{
		
		SetVertexShader( CompileShader( vs_5_0, VSi() ) );
		SetGeometryShader( CompileShader( gs_5_0, GS() ) );
	    SetGeometryShader( StreamOutGS );

	}
}