/**
 * Technicolor2 version 1.0
 * Original by Prod80
 * Optimized by CeeJay.dk
 */

cbuffer cbuf : register(b0)
{
	// Higher means darker and more intense colors
    float3 ColorStrength = float3(0.2, 0.2, 0.2);
    // Higher means brighter image.
    float Brightness <float uimin = 0.5; float uimax = 1.5;> = 1.0;
    // Additional saturation control since this effect tends to oversaturate the image.
    float Saturation <float uimin = 0.0; float uimax = 1.5;> = 1.0;
    float Strength <float uimin = 0.0; float uimax = 1.0;> = 1.0;
}

#include "ReShade.fxh"

float4 TechnicolorPass(float4 vpos : SV_Position, float2 texcoord : TexCoord) : SV_Target
{
    float4 colori = ReShade_BackBuffer.SampleLevel(ReShade_sL, texcoord, 0);
	float3 color = colori.rgb;
	
	float3 temp = 1.0 - color;
	float3 target = temp.grg;
	float3 target2 = temp.bbr;
	float3 temp2 = color * target;
	temp2 *= target2;

	temp = temp2 * ColorStrength;
	temp2 *= Brightness;

	target = temp.grg;
	target2 = temp.bbr;

	temp = color - target;
	temp += temp2;
	temp2 = temp - target2;

	color = lerp(color, temp2, Strength);
	color = lerp(dot(color, 0.333), color, Saturation);

	return float4(color, colori.a);
}

technique Technicolor2
{
	pass
	{
		VertexShader = PostProcessVS;
		PixelShader = TechnicolorPass;
	}
}
