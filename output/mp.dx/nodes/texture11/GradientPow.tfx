//@author: 
//@help: 
//@tags: source
//@credits:

float2 R:TARGETSIZE;
#include <packs/mp.fxh/math/noise.fxh>

#if !defined(OUTFORMAT) /// -type string
#define OUTFORMAT "R16G16B16A16_Float"
#endif

cbuffer controls:register(b0){

	float4x4 tTex <string uiname="Transform";>;
	float4 Color1 <bool color=true;> =float4(0,0,0,1);
	float4 Color2 <bool color=true;> =1;
	float Gamma=1;
	bool ClampColor =0;
	float Dithering <float uimin=0.0; float uimax=1.0;> = 1; 
	float DitherSeed =0;
};

#include <packs/dx11/nodes/texture11/Source/Noise.fxh>

float4 _dither(float4 c,float2 x,float RandomSeed=0,float Levels=255,float AddNoise=1){
	float4 nois=_dnoise4(x,RandomSeed);
	c*=Levels;
	c+=(nois-.5)*AddNoise;
	c/=Levels;
	return c;
}


float4 pGRAD(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0,uniform int interp,uniform bool radial):SV_TARGET{
	float4 c=0;
	float2 x0=mul(float4((x.xy*2-1)*float2(1,-1),0,1),tTex).xy*0.5*float2(1,-1)+0.5;
	float fade=x0.x;
	if(radial)fade=length(x0.xy-.5)*2;
	if(interp==2)fade=exp(-(1-fade));
	fade=sign(fade)*pow(abs(fade),Gamma);
	if(ClampColor)fade=saturate(fade);
	if(interp==1)fade=smoothstep(0,1,fade);
	c=lerp(Color1,Color2,fade);
	if(Dithering>0)c=_dither(c,x*R,DitherSeed,256,Dithering);
    return c;
}


technique10 Linear				{pass P1<string format=OUTFORMAT;>{SetPixelShader(CompileShader(ps_4_0,pGRAD(0,0)));}}
technique10 Radial				{pass P1<string format=OUTFORMAT;>{SetPixelShader(CompileShader(ps_4_0,pGRAD(0,1)));}}
technique10 Smoothstep			{pass P1<string format=OUTFORMAT;>{SetPixelShader(CompileShader(ps_4_0,pGRAD(1,0)));}}
technique10 Smoothstep_Radial	{pass P1<string format=OUTFORMAT;>{SetPixelShader(CompileShader(ps_4_0,pGRAD(1,1)));}}
technique10 Exponential			{pass P1<string format=OUTFORMAT;>{SetPixelShader(CompileShader(ps_4_0,pGRAD(2,0)));}}
technique10 Exponential_Radial	{pass P1<string format=OUTFORMAT;>{SetPixelShader(CompileShader(ps_4_0,pGRAD(2,1)));}}




