#include <packs/mp.fxh/math/noise.fxh>


Texture2D ColorTex: PREVIOUS;
#define PI 3.14159265358979

#if !defined(SAMPCOUNT) /// -type int
#define SAMPCOUNT 16
#endif

Texture2D Velocity;
//Texture2D Depth;

cbuffer controls:register(b0){
	float2 ScreenSize:TARGETSIZE;
	float Amount = 0.5;
	float PixelsPerSample = 1;
	float MaxSamples = 16;
	float BlurOffset = 0;
	float alphapower = 1;
	bool Aspect <bool visible=false;string uiname="Keep Aspect Ratio";> = true;
};

SamplerState s0 <bool visible=false;string uiname="Sampler";>
{
	Filter=MIN_MAG_MIP_LINEAR;
	AddressU=CLAMP;
	AddressV=CLAMP;
	MipLODBias = 0;
};

SamplerState s_vel : IMMUTABLE
{
	Filter=MIN_MAG_MIP_POINT;
	AddressU=CLAMP;
	AddressV=CLAMP;
	MipLODBias = 0;
};

float4 mblur(float4 PosWVP:SV_POSITION,float2 uv:TEXCOORD0):SV_Target
{
	float irs = length(2/ScreenSize);
    float2 vmap = Velocity.SampleLevel(s0, uv, 0).xy;
	if(all(vmap<=0.01))
		vmap = 0.5;
	
    float2 vel = vmap-0.5;
	vel *= Amount;
	
	//float2 asp=lerp(1,ScreenSize.x/ScreenSize,Aspect);
	float2 asp=1;
    float4 c=0;
	float iter=min(length(vel)/irs/PixelsPerSample, MaxSamples);
	if(iter <= 1.0)
		return ColorTex.SampleLevel(s0,uv,0);
	
    //float cd = Depth.SampleLevel(s0, uv, 0).r;
	float twg = 0;
    for (float i=0; i<iter; i++)
	{
		float noiseoffs = (hash13(float3(uv*100, i))-0.5)/iter * length(vel) * 2;
    	float prog = i/iter-0.5 + noiseoffs;
		float2 puv = ((uv-.5)/asp+vel*float2(1,-1)*(prog-BlurOffset/2))*asp+.5;
		//float pd = Depth.SampleLevel(s0, puv, 0).r;
		//if(pd-cd > 0.01) continue;
    	float wg = pow(abs(prog), 0.25);
    	twg += wg;
        c+=ColorTex.SampleLevel(s0,puv,0)*wg;
    }
    c=c/twg;
    return c;
}
float4 mblurfixedsamp(float4 PosWVP:SV_POSITION,float2 uv:TEXCOORD0):SV_Target
{
	float irs = length(2/ScreenSize);
    float2 vmap = Velocity.SampleLevel(s0, uv, 0).xy;
	if(all(vmap<=0.01))
		vmap = 0.5;
	
    float2 vel = vmap-0.5;
	vel *= Amount;
	
	//float2 asp=lerp(1,ScreenSize.x/ScreenSize,Aspect);
	float2 asp=1;
    float4 c=0;
	//float iter=min(length(vel)/irs/PixelsPerSample, MaxSamples);
	//if(iter <= 1.0)
		//return ColorTex.SampleLevel(s0,uv,0);
	
    //float cd = Depth.SampleLevel(s0, uv, 0).r;
	float twg = 0;
	
	[unroll]
    for (float i=0; i<SAMPCOUNT; i++)
	{
		float noiseoffs = (hash13(float3(uv*100, i))-0.5)/SAMPCOUNT * length(vel) * 2;
    	float prog = i/SAMPCOUNT-0.5 + noiseoffs;
		float2 puv = ((uv-.5)/asp+vel*float2(1,-1)*(prog-BlurOffset/2))*asp+.5;
		//float pd = Depth.SampleLevel(s0, puv, 0).r;
		//float valid = (pd-cd > 0.01) || (cd > 0.1) ? 0.0 : 1.0;
		float valid = 1;
    	float wg = pow(abs(prog), 0.25) * valid;
    	twg += wg;
        c+=ColorTex.SampleLevel(s0,puv,0)*wg;
    }
    c=c/twg;
    return c;
}

technique11 DynamicSampleCount {
	pass P3 <string format="R16G16B16A16_Float";>
	{SetPixelShader(CompileShader(ps_5_0,mblur()));}
}
technique11 FixedSampleCount {
	pass P3 <string format="R16G16B16A16_Float";>
	{SetPixelShader(CompileShader(ps_5_0,mblurfixedsamp()));}
}